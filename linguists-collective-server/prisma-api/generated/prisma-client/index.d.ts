// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  job: (where?: JobWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  job: (where: JobWhereUniqueInput) => JobNullablePromise;
  jobs: (args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Job>;
  jobsConnection: (args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JobConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createJob: (data: JobCreateInput) => JobPromise;
  updateJob: (args: {
    data: JobUpdateInput;
    where: JobWhereUniqueInput;
  }) => JobPromise;
  updateManyJobs: (args: {
    data: JobUpdateManyMutationInput;
    where?: JobWhereInput;
  }) => BatchPayloadPromise;
  upsertJob: (args: {
    where: JobWhereUniqueInput;
    create: JobCreateInput;
    update: JobUpdateInput;
  }) => JobPromise;
  deleteJob: (where: JobWhereUniqueInput) => JobPromise;
  deleteManyJobs: (where?: JobWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  job: (
    where?: JobSubscriptionWhereInput
  ) => JobSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type JobOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "associateType_ASC"
  | "associateType_DESC"
  | "published_ASC"
  | "published_DESC"
  | "accepted_ASC"
  | "accepted_DESC"
  | "date_ASC"
  | "date_DESC"
  | "location_ASC"
  | "location_DESC"
  | "currency_ASC"
  | "currency_DESC"
  | "bill_ASC"
  | "bill_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "address_ASC"
  | "address_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "available_ASC"
  | "available_DESC"
  | "isAssociate_ASC"
  | "isAssociate_DESC"
  | "accumulatedInvoice_ASC"
  | "accumulatedInvoice_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface JobUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  languages?: Maybe<JobUpdatelanguagesInput>;
  associateType?: Maybe<String>;
  published?: Maybe<Boolean>;
  accepted?: Maybe<Boolean>;
  date?: Maybe<String>;
  location?: Maybe<String>;
  client?: Maybe<UserUpdateOneRequiredWithoutJobsPostedInput>;
  associate?: Maybe<UserUpdateOneWithoutJobsInput>;
  currency?: Maybe<String>;
  bill?: Maybe<Int>;
}

export type JobWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface JobCreateManyWithoutAssociateInput {
  create?: Maybe<
    JobCreateWithoutAssociateInput[] | JobCreateWithoutAssociateInput
  >;
  connect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
}

export interface UserUpdateOneWithoutJobsInput {
  create?: Maybe<UserCreateWithoutJobsInput>;
  update?: Maybe<UserUpdateWithoutJobsDataInput>;
  upsert?: Maybe<UserUpsertWithoutJobsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface JobCreateWithoutAssociateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  languages?: Maybe<JobCreatelanguagesInput>;
  associateType: String;
  published?: Maybe<Boolean>;
  accepted?: Maybe<Boolean>;
  date: String;
  location: String;
  client: UserCreateOneWithoutJobsPostedInput;
  currency: String;
  bill: Int;
}

export interface UserUpdateWithoutJobsPostedDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  available?: Maybe<Boolean>;
  languages?: Maybe<UserUpdatelanguagesInput>;
  isAssociate?: Maybe<Boolean>;
  associateTypes?: Maybe<UserUpdateassociateTypesInput>;
  jobs?: Maybe<JobUpdateManyWithoutAssociateInput>;
  accumulatedInvoice?: Maybe<Int>;
}

export interface UserCreateOneWithoutJobsInput {
  create?: Maybe<UserCreateWithoutJobsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserCreateWithoutJobsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  address?: Maybe<String>;
  phoneNumber: String;
  available?: Maybe<Boolean>;
  languages?: Maybe<UserCreatelanguagesInput>;
  isAssociate?: Maybe<Boolean>;
  associateTypes?: Maybe<UserCreateassociateTypesInput>;
  jobsPosted?: Maybe<JobCreateManyWithoutClientInput>;
  accumulatedInvoice?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  available?: Maybe<Boolean>;
  languages?: Maybe<UserUpdatelanguagesInput>;
  isAssociate?: Maybe<Boolean>;
  associateTypes?: Maybe<UserUpdateassociateTypesInput>;
  accumulatedInvoice?: Maybe<Int>;
}

export interface JobCreateManyWithoutClientInput {
  create?: Maybe<JobCreateWithoutClientInput[] | JobCreateWithoutClientInput>;
  connect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  address?: Maybe<String>;
  phoneNumber: String;
  available?: Maybe<Boolean>;
  languages?: Maybe<UserCreatelanguagesInput>;
  isAssociate?: Maybe<Boolean>;
  associateTypes?: Maybe<UserCreateassociateTypesInput>;
  jobs?: Maybe<JobCreateManyWithoutAssociateInput>;
  jobsPosted?: Maybe<JobCreateManyWithoutClientInput>;
  accumulatedInvoice?: Maybe<Int>;
}

export interface JobCreateWithoutClientInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  languages?: Maybe<JobCreatelanguagesInput>;
  associateType: String;
  published?: Maybe<Boolean>;
  accepted?: Maybe<Boolean>;
  date: String;
  location: String;
  associate?: Maybe<UserCreateOneWithoutJobsInput>;
  currency: String;
  bill: Int;
}

export interface UserUpsertWithoutJobsInput {
  update: UserUpdateWithoutJobsDataInput;
  create: UserCreateWithoutJobsInput;
}

export interface UserUpdateWithoutJobsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  available?: Maybe<Boolean>;
  languages?: Maybe<UserUpdatelanguagesInput>;
  isAssociate?: Maybe<Boolean>;
  associateTypes?: Maybe<UserUpdateassociateTypesInput>;
  jobsPosted?: Maybe<JobUpdateManyWithoutClientInput>;
  accumulatedInvoice?: Maybe<Int>;
}

export interface JobUpsertWithWhereUniqueWithoutClientInput {
  where: JobWhereUniqueInput;
  update: JobUpdateWithoutClientDataInput;
  create: JobCreateWithoutClientInput;
}

export interface JobUpdatelanguagesInput {
  set?: Maybe<String[] | String>;
}

export interface JobUpdateWithWhereUniqueWithoutClientInput {
  where: JobWhereUniqueInput;
  data: JobUpdateWithoutClientDataInput;
}

export interface UserUpdateOneRequiredWithoutJobsPostedInput {
  create?: Maybe<UserCreateWithoutJobsPostedInput>;
  update?: Maybe<UserUpdateWithoutJobsPostedDataInput>;
  upsert?: Maybe<UserUpsertWithoutJobsPostedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface JobCreatelanguagesInput {
  set?: Maybe<String[] | String>;
}

export interface JobWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  associateType?: Maybe<String>;
  associateType_not?: Maybe<String>;
  associateType_in?: Maybe<String[] | String>;
  associateType_not_in?: Maybe<String[] | String>;
  associateType_lt?: Maybe<String>;
  associateType_lte?: Maybe<String>;
  associateType_gt?: Maybe<String>;
  associateType_gte?: Maybe<String>;
  associateType_contains?: Maybe<String>;
  associateType_not_contains?: Maybe<String>;
  associateType_starts_with?: Maybe<String>;
  associateType_not_starts_with?: Maybe<String>;
  associateType_ends_with?: Maybe<String>;
  associateType_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  accepted?: Maybe<Boolean>;
  accepted_not?: Maybe<Boolean>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  client?: Maybe<UserWhereInput>;
  associate?: Maybe<UserWhereInput>;
  currency?: Maybe<String>;
  currency_not?: Maybe<String>;
  currency_in?: Maybe<String[] | String>;
  currency_not_in?: Maybe<String[] | String>;
  currency_lt?: Maybe<String>;
  currency_lte?: Maybe<String>;
  currency_gt?: Maybe<String>;
  currency_gte?: Maybe<String>;
  currency_contains?: Maybe<String>;
  currency_not_contains?: Maybe<String>;
  currency_starts_with?: Maybe<String>;
  currency_not_starts_with?: Maybe<String>;
  currency_ends_with?: Maybe<String>;
  currency_not_ends_with?: Maybe<String>;
  bill?: Maybe<Int>;
  bill_not?: Maybe<Int>;
  bill_in?: Maybe<Int[] | Int>;
  bill_not_in?: Maybe<Int[] | Int>;
  bill_lt?: Maybe<Int>;
  bill_lte?: Maybe<Int>;
  bill_gt?: Maybe<Int>;
  bill_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<JobWhereInput[] | JobWhereInput>;
  OR?: Maybe<JobWhereInput[] | JobWhereInput>;
  NOT?: Maybe<JobWhereInput[] | JobWhereInput>;
}

export interface UserCreateWithoutJobsPostedInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  address?: Maybe<String>;
  phoneNumber: String;
  available?: Maybe<Boolean>;
  languages?: Maybe<UserCreatelanguagesInput>;
  isAssociate?: Maybe<Boolean>;
  associateTypes?: Maybe<UserCreateassociateTypesInput>;
  jobs?: Maybe<JobCreateManyWithoutAssociateInput>;
  accumulatedInvoice?: Maybe<Int>;
}

export interface UserUpdatelanguagesInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateassociateTypesInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdateassociateTypesInput {
  set?: Maybe<String[] | String>;
}

export interface JobSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<JobWhereInput>;
  AND?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
  OR?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
  NOT?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
}

export interface JobUpdateManyWithoutAssociateInput {
  create?: Maybe<
    JobCreateWithoutAssociateInput[] | JobCreateWithoutAssociateInput
  >;
  delete?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  connect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  set?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  disconnect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  update?: Maybe<
    | JobUpdateWithWhereUniqueWithoutAssociateInput[]
    | JobUpdateWithWhereUniqueWithoutAssociateInput
  >;
  upsert?: Maybe<
    | JobUpsertWithWhereUniqueWithoutAssociateInput[]
    | JobUpsertWithWhereUniqueWithoutAssociateInput
  >;
  deleteMany?: Maybe<JobScalarWhereInput[] | JobScalarWhereInput>;
  updateMany?: Maybe<
    JobUpdateManyWithWhereNestedInput[] | JobUpdateManyWithWhereNestedInput
  >;
}

export interface JobUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  languages?: Maybe<JobUpdatelanguagesInput>;
  associateType?: Maybe<String>;
  published?: Maybe<Boolean>;
  accepted?: Maybe<Boolean>;
  date?: Maybe<String>;
  location?: Maybe<String>;
  currency?: Maybe<String>;
  bill?: Maybe<Int>;
}

export interface JobUpdateWithWhereUniqueWithoutAssociateInput {
  where: JobWhereUniqueInput;
  data: JobUpdateWithoutAssociateDataInput;
}

export interface JobUpdateWithoutClientDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  languages?: Maybe<JobUpdatelanguagesInput>;
  associateType?: Maybe<String>;
  published?: Maybe<Boolean>;
  accepted?: Maybe<Boolean>;
  date?: Maybe<String>;
  location?: Maybe<String>;
  associate?: Maybe<UserUpdateOneWithoutJobsInput>;
  currency?: Maybe<String>;
  bill?: Maybe<Int>;
}

export interface JobUpdateWithoutAssociateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  languages?: Maybe<JobUpdatelanguagesInput>;
  associateType?: Maybe<String>;
  published?: Maybe<Boolean>;
  accepted?: Maybe<Boolean>;
  date?: Maybe<String>;
  location?: Maybe<String>;
  client?: Maybe<UserUpdateOneRequiredWithoutJobsPostedInput>;
  currency?: Maybe<String>;
  bill?: Maybe<Int>;
}

export interface JobCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  languages?: Maybe<JobCreatelanguagesInput>;
  associateType: String;
  published?: Maybe<Boolean>;
  accepted?: Maybe<Boolean>;
  date: String;
  location: String;
  client: UserCreateOneWithoutJobsPostedInput;
  associate?: Maybe<UserCreateOneWithoutJobsInput>;
  currency: String;
  bill: Int;
}

export interface JobUpsertWithWhereUniqueWithoutAssociateInput {
  where: JobWhereUniqueInput;
  update: JobUpdateWithoutAssociateDataInput;
  create: JobCreateWithoutAssociateInput;
}

export interface UserCreatelanguagesInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpsertWithoutJobsPostedInput {
  update: UserUpdateWithoutJobsPostedDataInput;
  create: UserCreateWithoutJobsPostedInput;
}

export interface JobUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  languages?: Maybe<JobUpdatelanguagesInput>;
  associateType?: Maybe<String>;
  published?: Maybe<Boolean>;
  accepted?: Maybe<Boolean>;
  date?: Maybe<String>;
  location?: Maybe<String>;
  currency?: Maybe<String>;
  bill?: Maybe<Int>;
}

export interface JobUpdateManyWithWhereNestedInput {
  where: JobScalarWhereInput;
  data: JobUpdateManyDataInput;
}

export interface JobScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  associateType?: Maybe<String>;
  associateType_not?: Maybe<String>;
  associateType_in?: Maybe<String[] | String>;
  associateType_not_in?: Maybe<String[] | String>;
  associateType_lt?: Maybe<String>;
  associateType_lte?: Maybe<String>;
  associateType_gt?: Maybe<String>;
  associateType_gte?: Maybe<String>;
  associateType_contains?: Maybe<String>;
  associateType_not_contains?: Maybe<String>;
  associateType_starts_with?: Maybe<String>;
  associateType_not_starts_with?: Maybe<String>;
  associateType_ends_with?: Maybe<String>;
  associateType_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  accepted?: Maybe<Boolean>;
  accepted_not?: Maybe<Boolean>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  currency?: Maybe<String>;
  currency_not?: Maybe<String>;
  currency_in?: Maybe<String[] | String>;
  currency_not_in?: Maybe<String[] | String>;
  currency_lt?: Maybe<String>;
  currency_lte?: Maybe<String>;
  currency_gt?: Maybe<String>;
  currency_gte?: Maybe<String>;
  currency_contains?: Maybe<String>;
  currency_not_contains?: Maybe<String>;
  currency_starts_with?: Maybe<String>;
  currency_not_starts_with?: Maybe<String>;
  currency_ends_with?: Maybe<String>;
  currency_not_ends_with?: Maybe<String>;
  bill?: Maybe<Int>;
  bill_not?: Maybe<Int>;
  bill_in?: Maybe<Int[] | Int>;
  bill_not_in?: Maybe<Int[] | Int>;
  bill_lt?: Maybe<Int>;
  bill_lte?: Maybe<Int>;
  bill_gt?: Maybe<Int>;
  bill_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<JobScalarWhereInput[] | JobScalarWhereInput>;
  OR?: Maybe<JobScalarWhereInput[] | JobScalarWhereInput>;
  NOT?: Maybe<JobScalarWhereInput[] | JobScalarWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  available?: Maybe<Boolean>;
  available_not?: Maybe<Boolean>;
  isAssociate?: Maybe<Boolean>;
  isAssociate_not?: Maybe<Boolean>;
  jobs_every?: Maybe<JobWhereInput>;
  jobs_some?: Maybe<JobWhereInput>;
  jobs_none?: Maybe<JobWhereInput>;
  jobsPosted_every?: Maybe<JobWhereInput>;
  jobsPosted_some?: Maybe<JobWhereInput>;
  jobsPosted_none?: Maybe<JobWhereInput>;
  accumulatedInvoice?: Maybe<Int>;
  accumulatedInvoice_not?: Maybe<Int>;
  accumulatedInvoice_in?: Maybe<Int[] | Int>;
  accumulatedInvoice_not_in?: Maybe<Int[] | Int>;
  accumulatedInvoice_lt?: Maybe<Int>;
  accumulatedInvoice_lte?: Maybe<Int>;
  accumulatedInvoice_gt?: Maybe<Int>;
  accumulatedInvoice_gte?: Maybe<Int>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserCreateOneWithoutJobsPostedInput {
  create?: Maybe<UserCreateWithoutJobsPostedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface JobUpdateManyWithoutClientInput {
  create?: Maybe<JobCreateWithoutClientInput[] | JobCreateWithoutClientInput>;
  delete?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  connect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  set?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  disconnect?: Maybe<JobWhereUniqueInput[] | JobWhereUniqueInput>;
  update?: Maybe<
    | JobUpdateWithWhereUniqueWithoutClientInput[]
    | JobUpdateWithWhereUniqueWithoutClientInput
  >;
  upsert?: Maybe<
    | JobUpsertWithWhereUniqueWithoutClientInput[]
    | JobUpsertWithWhereUniqueWithoutClientInput
  >;
  deleteMany?: Maybe<JobScalarWhereInput[] | JobScalarWhereInput>;
  updateMany?: Maybe<
    JobUpdateManyWithWhereNestedInput[] | JobUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  phoneNumber?: Maybe<String>;
}>;

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  address?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  available?: Maybe<Boolean>;
  languages?: Maybe<UserUpdatelanguagesInput>;
  isAssociate?: Maybe<Boolean>;
  associateTypes?: Maybe<UserUpdateassociateTypesInput>;
  jobs?: Maybe<JobUpdateManyWithoutAssociateInput>;
  jobsPosted?: Maybe<JobUpdateManyWithoutClientInput>;
  accumulatedInvoice?: Maybe<Int>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  address?: String;
  phoneNumber: String;
  available: Boolean;
  languages: String[];
  isAssociate: Boolean;
  associateTypes: String[];
  accumulatedInvoice: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  address: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  available: () => Promise<Boolean>;
  languages: () => Promise<String[]>;
  isAssociate: () => Promise<Boolean>;
  associateTypes: () => Promise<String[]>;
  accumulatedInvoice: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<Boolean>>;
  languages: () => Promise<AsyncIterator<String[]>>;
  isAssociate: () => Promise<AsyncIterator<Boolean>>;
  associateTypes: () => Promise<AsyncIterator<String[]>>;
  accumulatedInvoice: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  address?: String;
  phoneNumber: String;
  available: Boolean;
  languages: String[];
  isAssociate: Boolean;
  associateTypes: String[];
  accumulatedInvoice: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  address: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  available: () => Promise<Boolean>;
  languages: () => Promise<String[]>;
  isAssociate: () => Promise<Boolean>;
  associateTypes: () => Promise<String[]>;
  jobs: <T = FragmentableArray<Job>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  jobsPosted: <T = FragmentableArray<Job>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  accumulatedInvoice: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  available: () => Promise<AsyncIterator<Boolean>>;
  languages: () => Promise<AsyncIterator<String[]>>;
  isAssociate: () => Promise<AsyncIterator<Boolean>>;
  associateTypes: () => Promise<AsyncIterator<String[]>>;
  jobs: <T = Promise<AsyncIterator<JobSubscription>>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  jobsPosted: <T = Promise<AsyncIterator<JobSubscription>>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  accumulatedInvoice: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  address: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  available: () => Promise<Boolean>;
  languages: () => Promise<String[]>;
  isAssociate: () => Promise<Boolean>;
  associateTypes: () => Promise<String[]>;
  jobs: <T = FragmentableArray<Job>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  jobsPosted: <T = FragmentableArray<Job>>(args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  accumulatedInvoice: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface JobConnection {
  pageInfo: PageInfo;
  edges: JobEdge[];
}

export interface JobConnectionPromise
  extends Promise<JobConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JobEdge>>() => T;
  aggregate: <T = AggregateJobPromise>() => T;
}

export interface JobConnectionSubscription
  extends Promise<AsyncIterator<JobConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<JobEdgeSubscription>>>() => T;
  aggregate: <T = AggregateJobSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface JobSubscriptionPayload {
  mutation: MutationType;
  node: Job;
  updatedFields: String[];
  previousValues: JobPreviousValues;
}

export interface JobSubscriptionPayloadPromise
  extends Promise<JobSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JobPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JobPreviousValuesPromise>() => T;
}

export interface JobSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JobSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JobSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JobPreviousValuesSubscription>() => T;
}

export interface Job {
  id: ID_Output;
  title: String;
  description: String;
  languages: String[];
  associateType: String;
  published: Boolean;
  accepted: Boolean;
  date: String;
  location: String;
  currency: String;
  bill: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface JobPromise extends Promise<Job>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  languages: () => Promise<String[]>;
  associateType: () => Promise<String>;
  published: () => Promise<Boolean>;
  accepted: () => Promise<Boolean>;
  date: () => Promise<String>;
  location: () => Promise<String>;
  client: <T = UserPromise>() => T;
  associate: <T = UserPromise>() => T;
  currency: () => Promise<String>;
  bill: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface JobSubscription
  extends Promise<AsyncIterator<Job>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  languages: () => Promise<AsyncIterator<String[]>>;
  associateType: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  accepted: () => Promise<AsyncIterator<Boolean>>;
  date: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  client: <T = UserSubscription>() => T;
  associate: <T = UserSubscription>() => T;
  currency: () => Promise<AsyncIterator<String>>;
  bill: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface JobNullablePromise extends Promise<Job | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  languages: () => Promise<String[]>;
  associateType: () => Promise<String>;
  published: () => Promise<Boolean>;
  accepted: () => Promise<Boolean>;
  date: () => Promise<String>;
  location: () => Promise<String>;
  client: <T = UserPromise>() => T;
  associate: <T = UserPromise>() => T;
  currency: () => Promise<String>;
  bill: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface JobPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  languages: String[];
  associateType: String;
  published: Boolean;
  accepted: Boolean;
  date: String;
  location: String;
  currency: String;
  bill: Int;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface JobPreviousValuesPromise
  extends Promise<JobPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  languages: () => Promise<String[]>;
  associateType: () => Promise<String>;
  published: () => Promise<Boolean>;
  accepted: () => Promise<Boolean>;
  date: () => Promise<String>;
  location: () => Promise<String>;
  currency: () => Promise<String>;
  bill: () => Promise<Int>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface JobPreviousValuesSubscription
  extends Promise<AsyncIterator<JobPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  languages: () => Promise<AsyncIterator<String[]>>;
  associateType: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  accepted: () => Promise<AsyncIterator<Boolean>>;
  date: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  currency: () => Promise<AsyncIterator<String>>;
  bill: () => Promise<AsyncIterator<Int>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateJob {
  count: Int;
}

export interface AggregateJobPromise
  extends Promise<AggregateJob>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJobSubscription
  extends Promise<AsyncIterator<AggregateJob>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface JobEdge {
  node: Job;
  cursor: String;
}

export interface JobEdgePromise extends Promise<JobEdge>, Fragmentable {
  node: <T = JobPromise>() => T;
  cursor: () => Promise<String>;
}

export interface JobEdgeSubscription
  extends Promise<AsyncIterator<JobEdge>>,
    Fragmentable {
  node: <T = JobSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Job",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
